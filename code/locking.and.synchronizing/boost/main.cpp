#include <stdio.h>
#include <pthread.h>
#include <time.h>
#include <stdlib.h>
#include <unistd.h>
#include <list>
#include <boost/thread.hpp>












///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class critical_section
{
public:
	critical_section();
	~critical_section();
	static void init();
	static void destroy();
private:
	critical_section(const critical_section& other);
	critical_section& operator = (const critical_section& other);
	static boost::recursive_mutex _mutex;
	boost::lock_guard<boost::recursive_mutex>* _locked;
};

boost::recursive_mutex critical_section::_mutex;

critical_section::critical_section() {
	this->_locked = new boost::lock_guard<boost::recursive_mutex>(_mutex);
}

critical_section::~critical_section() {
	delete(this->_locked);
}




















///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class task {
public:
	static void* _thread_proc(void* param);
	static void _inner_operation();
private:
	task();
	~task();
};

void* task::_thread_proc(void* param) {
	critical_section locked;
	_inner_operation();
	int handle = pthread_self();
	printf("[%08x] $$$ start $$$\n", handle);
	sleep(2);
	printf("[%08x] --- exit ---\n", handle);
}

void task::_inner_operation() {
	critical_section locked;
}


















///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class task_manager {
public:
	static void begin();
	static void wait();
private:
	task_manager();
	~task_manager();
	static pthread_t _begin_thread();
	static std::list<pthread_t> _task;
};

std::list<pthread_t> task_manager::_task;

void task_manager::begin() {
	for(int i = 0; i < 4; i++) {
		pthread_t th;
		int result = pthread_create(&th, NULL, &task::_thread_proc, NULL);
		if(result != 0) {
			continue;
		}
		_task.push_back(th);
	}
}

void task_manager::wait() {
	for(std::list<pthread_t>::iterator i = _task.begin(); i != _task.end(); i++) {
		pthread_t t = *i;
		pthread_join(t, NULL);
	}
}

















///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[]) {
	task_manager::begin();
	task_manager::wait();
	printf("--- end ---\n");
	return 0;
}
