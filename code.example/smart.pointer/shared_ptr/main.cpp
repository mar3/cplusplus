#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tr1/memory>
#include <iostream>
#include <string>
#include <list>






///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////



const char* __SAFE__(const char* p) {
	return p == NULL ? "" : p;
}







///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class ScopeMarker {

public:

	ScopeMarker(const char* signature) {
		_signature = __SAFE__(signature);
		std::cout << "<" << _signature << "> $$$ begin $$$" << std::endl;
	}

	~ScopeMarker() {
		std::cout << "<" << _signature << "> --- end ---" << std::endl;
	}

private:

	ScopeMarker(const ScopeMarker&);

	ScopeMarker& operator = (const ScopeMarker&);

	std::string _signature;
};



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class Egg {

public:

	Egg(int id) {
		_buffer = (char*)malloc(30);
		sprintf(_buffer, "id:%d", id);
		printf("<Egg::Egg()> [新しいインスタンスのアドレス:%016x] (%s)\n", this, _buffer);
	}

	const char* value() const {
		return __SAFE__(_buffer);
	}

	~Egg() {
		printf("<Egg::~Egg()> [解放されるインスタンスのアドレス:%016x] (%s)\n", this, __SAFE__(_buffer));
		_clear();
	}

private:

	char* _buffer;

	Egg(const Egg& other);

	Egg& operator = (const Egg& other);

	void _clear() {
		if(_buffer == NULL)
			return;
		free(_buffer);
		_buffer = NULL;
	}
};


typedef std::tr1::shared_ptr<Egg> PEGG;
typedef std::list<PEGG> EggList;






///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
class application {

public:

	static void test() {
		ScopeMarker marker("test()");
		//標本の生成
		EggList list = incubate();
		//リストの参照を渡して何らかの処理を行う
		diagnose0(list);
		//リストの複製を渡して何らかの処理を行う
		diagnose1(list);
	}

private:

	application();

	static void diagnose0(const EggList& list) {
		ScopeMarker marker("diagnose0()");
		for(EggList::const_iterator i = list.begin(); i != list.end(); i++) {
			Egg& e = **i;
			printf("[オブジェクトのアドレス:0x%016x]=(%s)\n", &e, e.value());
		}
	}

	static void diagnose1(EggList list) {
		ScopeMarker marker("incubate1()");
		for(EggList::const_iterator i = list.begin(); i != list.end(); i++) {
			Egg& e = **i;
			printf("[オブジェクトのアドレス:0x%016x]=(%s)\n", &e, e.value());
		}
	}

	static EggList incubate() {
		ScopeMarker marker("incubate()");
		EggList samples;
		while(samples.size() < 3) {
			PEGG e(new Egg(samples.size()));
			samples.push_back(e); //e は複製されている
		}
		//複製を返す
		return samples;
	}
};










///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
int main(int argc, char* argv[]) {
	ScopeMarker scope("main()");
	application::test();
	return 0;
}
